==》正则表达式RegExp（regular expression）
正则表达式是很多语言都支持的（java js php。。。。）

概念：所谓正则表达式，就是用某种模式去匹配一类字符串的一个公式。在js中就是RegExp对象

-》创建regexp：有两种方法
1.隐式创建：var reg=/表达式规范/gi（g-global是否执行全局匹配  i 是否区分大小写）
2.显式创建：var reg=new RegExp("表达式",gi);

说明：g 全局标志(不会只找到第一个)	  i 忽略大小写		m 多行识别模式

-》regExp的方法
exec：找到并打出值
test：只找到值返回true/false

-》四个支持正则表达式的String 对象的方法
search 检索与正则表达式相匹配的值。 
match 找到一个或多个正则表达式的匹配。
replace 替换与正则表达式匹配的子串。
split 把字符串分割为字符串数组。 

-》属性
index：位置
leftContext:左边的字串
rightContext:右边的字串

说明：找如1331,2244这类的数可以这样 
-》(\d)(\d)\2\1表示第三个数与第二个相同，第四个数与第一个相同
-》(\d)\1(\d)\2同理表示第二个数与第一个相同，第四个数与第三个相同
-》\1表示内存第一个

/(\d){5}-(\d)\2\2(\d)\3\3(\d)\4\4/gi-------12254-000222555

-->元字符-
限定符：
	{3}  表示会重复几次（3次）
	{3,4}表示有3-4次出现，贪婪匹配--》优先匹配4次
	+    表示1-多次，同样贪婪匹配
	*    0-多
	？   0-1
->字符匹配符：
	[a-z]   匹配a-z中任意一个
	[^a-z]	匹配不是a-z中任意一个
	[abds]	匹配abds中任意一个
	[abds]	匹配不是abds中任意一个
	\d==[0-9]		\D==[^0-9]
	\w==[a-zA-Z0-9_]	\W==[^a-zA-Z0-9_]	
	\s任意空白字符（如空格，tab，回车）
	\S==(^\s)
	.  表示\n外所有字符  若要匹配.则要写\.

定位符：
	^:/^aaa/匹配字符开始的位置（以其为开始，否则找不到）
	$:/aaa$/字符结束的位置（以其为结尾，否则找不到）

选择匹配符：
(han|喊|韩)  选择这三个任一个

需要加转义字符的：.*+()$/\?[]^{}


正则表达式的() [] {}有不同的意思。
() 是为了提取匹配的字符串。表达式中有几个()就有几个相应的匹配字符串。
(\s*)表示连续空格的字符串。
[]是定义匹配的字符范围。比如 [a-zA-Z0-9] 表示相应位置的字符要匹配英文字符和数字。[\s*]表示空格或者*号。
{}一般用来表示匹配的长度，比如 \s{3} 表示匹配三个空格，\s[1,3]表示匹配一到三个空格。
