php面向对象编程
==>析构方法function __destroy()=======================
作用主要用于 释放资源（比如释放数据库的链接，图片资源。。。销毁某个对象。。）
1析构方法会自动调用
2析构方法主要用于销毁资源
3析构方法调用顺序是，先创建对象后被销毁
4析构方法什么时候被调用？
（1）当程序（进程结束）退出时
（2）当一个对象称为垃圾对象的时候，该对象的析构方法会将其销毁
（3）垃圾对象：没有任何变量在引用它
（4）一旦成为垃圾对象，析构函数会立即调用
==》小结：
1php5计入的析构方法function __destroy()
2析构方法没有返回值
3主要作用是释放资源的操作，并不是销毁对象本身
4在销毁对象前，系统自动的调用该类的析构方法
5一个类最多只能有一个析构方法

==》静态变量
全局变量（global）：在程序中都可以使用的变量
静态变量：在类中专门使用的变量
静态变量的基本用法：
1在类中定义静态变量：[访问修饰符]static $变量名
2访问： （1）在类内部：self::$类变量名 或 类名::$类变量名
	（2）在类外部：类名::$类变量名

==》静态方法
需求：当我们操作静态变量的时候，我们可以考虑使用静态方法，比如统计所有学生交的学费
--++需要所有变量共享时用静态变量（公共的属性）
特点：  （1）静态方法去操作静态变量
	（2）静态方法不能操作非静态变量
普通的成员方法，即可以操作静态变量，有可以操作非静态变量。
==--》小结-------------------------------------------------------------
==》静态变量与动态变量的区别：
（1）加上static称为类变量或静态变量 ，否则称为【实例变量】
（2）类变量是与类相关的，公共的属性
（3）实例变量是属于每个对象个体的属性
（4）类变量可以通过类名::类变量名 直接访问
静态方法：（1）静态方法：与类相关，公共的方法
	（2）实例方法属于每个对象个体的方法
	（3）静态方法可以通过类名::类方法名 直接访问 或（对象实例->类方法名）
----------------------------------------------------------------------
php面向对象三大特征：封装、继承、多态==》抽象
抽象：把一类事物的共有的【属性】和【行为】提取出来，形成一个物理模型（模板）。这种研究问题的方法称为抽象。  

封装：就是把抽象出的数据和对数据的操作封装在一起，数据被保护在封装内部
【访问修饰符】：（1）public    类内部，外部，子类 中使用
		（2）protected 类内部，子类       中使用
		（3）private   类内部             中使用
	注意：如果方法没写访问修饰符则默认是public
		成员属性必须先写访问修饰符
		函数之间可以任意调用，但是要用this
访问或修改：（2）（3）可以通过一个public函数去访问或修改
魔术变量：__set() __get()了解，（通常不用）

继承（extends）：一个子类通过extends 父类 把父类的（public/protected）属性和（public/protected）方法继承下来（提高代码复用性）
基本语法：
class 类名 extends 父类名{属性/方法}
讨论：
1.一个子类把父类的（public/protected）属性和（public/protected）方法继承下来
2.要继承多个父类可以继承父类的父类（爷爷类/超类）
3.子类不会调用父类的构造方法
4.如果希望调用父类的 构造方法，或者其他（public/protected）方法可以：
	在函数里写【类名::__construct();】【parent::__construct();】
5.当一个子类的方法和父类的方法完全相同，我们成为【方法的覆盖/重写】

--》重载
基本概念：函数名一样，通过函数的参数个数或者是参数类型不同，达到调用同一个函数名，但是可以区分不同的函数
function test（）；和function test（$a）；放在一起会报错
使用__call($method,$p){}:调用一个方法而该方法不存在，则系统自动调用__call【不推荐使用】
小结：
（1）php5默认情况下不支持方法重载
（2）php5可以使用魔术方法__call来模拟方法重载
---》方法的【重写/覆盖】------------------
说明：在父类中写了方法，在子类写入同样的方法就会覆盖掉父类的这个同名方法
		（类的名称/参数完全一样）（不要求参数名相同）
细节：（1）要实现重写，要求子类和父类的类名和参数完全一样
	（2）要输出父类的方法则可以（parent::$类变量名 或 父类名::$类变量名）
	（3）访问修饰符可以不同，但子类要>=父类（public>protected>private）
===》多态（多种状态）
说明：子类没有覆盖父类的方法，则调用父类方法，若覆盖了，则调用子类的方法，这就是多态
