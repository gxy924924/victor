===>函数-------------------------
基本概念：为完成某个功能的程序指令的集合，称为函数（可以调用到各个需要它的地方）
   引入函数相当于把引入函数的文件整个复制到了引入目标文件中。
//引入需要的php文件
require 'funcs.php';
=================================================
function jiSuan($num1,$num2,$oper)
{$res=0;//$res 表示计算结果
	switch($oper){。。。	}
return $res;//表示返还结果}
讨论函数之细节 和其运行原理
--》自定义函数的基本语法结构
function 函数名（参数列表）{//函数体（指令集合）//return 语句；（返回一个结果）}

----》php页面相互调用的知识点
目前我们有这样一个需求：
1.a.php 页面要使用 b.php 定义的函数 ，我们可以使用如下指令
require   require_once    include    include_once
//--》require   require_once 的区别：前者遇到会包含文件，后者会判断是否包含过了，如果包含过了，则不再包含文件。一则可以节省资源，二则避免重复定义的错误。
// --》include    include_once 功能：都是可以吧一个页面包含到另一个页面。区别：与上面相同
//-->require  include 区别：include如果出现了错误，会继续执行，require不会。（都会报错）
include在需要时才会引入，require在最开始就会引入。
======>结论：我们做项目的时候通常使用 require_once/////且放在【最前面】否则报错
==》3种引入方法
1.require 'b.php';//直接引入
2.require ('b.php');//带括号
3.$a="b.php";require $a;//通过变量引入函数
--》举例 require的用法
<?php
	require('要引入的文件名')；
	$filePath="abc.php";
	require $filePath;
	require '要引入的文件名（路径）';
?>

说明：1php执行时，一旦遇到函数的调用，就会开辟一个新栈，执行该函数的代码，执行完毕后，返回继续执行后续代码。
redeclare ：再次声明；
include：包含，包括。

===>如何理解函数function abc(){}====
1。按照函数执行的规则，只要一看到函数，php就会开辟一个新栈（空间）。
2。各个栈间的变量是相互独立的。
return 表达式；//没有就不返回值
范例：
<?php
function abc($n){
if($n>2){abc(--$n);}//函数自己调用自己称为递归调用
echo '$n='.$n."<br/>";
}
abc(4);
?>
--------------
结果：
$n=2
$n=2
$n=3
=====》函数的深入使用------------------
1.函数的参数列表可以是多个function abc($a,$b,......){}
2.参数列表的数据类型可以是任意类型(php语言支持的)。
3.函数的命名跟自定义变量一样，不能以数字等打头。
4.函数名不区分大小写。
5.一个自定义函数变量是局部的，函数外不生效。
6.使用global全局变量是在函数外也生效。global $a=12;//表示在栈内要使用外面的变量。
7.为了防止全局变量混乱，可以使用unset（$a）删除变量。
8.函数默认值function abc（$b,$a=2）{}//此时默认b=0,a=2
	    $e=70 abc（$e,30）{}//此时认为b=70,a=30
	    $e=70 abc（$e,30,20,10,15）{}//此时认为b=70,a=30剩下的舍去
9.php默认是值传递，如果需要引用传递，需要使用&$(&$b)

==>在php中有三种提示 notice，waring，error
