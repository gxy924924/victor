php面向对象编程
==》抽象类abstract=====
为什么要设计抽象类这个技术？
1.在实际开发中，我们可能有这样一种类，是其他类的父类，但是它本身不需要实例化，主要用于让子类来继承他，这样可以达到代码复用，同时利于项目设计者设计类。

注意事项：
1基本用法
abstract class 类名{//方法  //属性}
2如果一个类使用了abstract 来修饰，则该类就是抽象类，如果一个方法使用了abstract 来修饰，则该方法就是抽象方法【抽象方法不能有方法体--》去掉{}用;结尾】
3抽象类不能被实例化【不能 new 抽象类】
4抽象类不一定要包含abstract方法，【即抽象类可以没有abstract方法，也可以有实现了的方法】
5一旦一个类包含了abstract方法，则这个类必须声明abstract
6如果一个类继承了抽象类，则该类必须实现所有继承的抽象方法，除非他也是抽象类。

.。。。php76
==》接口interface====================================================================
1接口的使用基本语法
interface 接口名{//属性   //方法}
//接口中的方法不能有方法体

2如何实现接口
class 类名 implements 接口名{}

3接口的主要作用就是声明一些方法，供其他类来实现他

4.当多个类，他们之间是平级的关系，这些类都会去实现某个功能，只是实现的方式不同，可用接口

接口细节讨论：
1.接口不能去实例化($a=new iUsb();错误！)
2接口不能有方法体：
3一个类可以去实现多个接口  语法： class 类名 implements 接口1，接口2{}
4接口中可以有属性，但必须是常量，并且是public
5接口的方法必须是public的
6一个接口不能继承其他的类，可以继承其他的接口（可多个）

小结：接口是更加抽象的抽象类，不能有实现了的方法
（1）一个借口可以继承多个其他接口
（2）当一个类去实现了某些接口，则必须把所有接口的方法都实现
（3）一个类可以同时继承父类，并实现接口（多个）

特点：高内聚低耦合（我们编程中希望的效果）

