 雇员管理系统开发文档
1.需求分析
该项目完成如下功能
1.管理员可以登录到管理界面
2。可以对雇员进行增删改查

附带：可以实现用户在一定时间不用反复登录。可以统计网站的访问次数

2.画出uml（时序图）

3.界面设计

4.设计数据库

请注意：对弈一个大型项目而言，我们建议表的字段名可以采用=》表名_字段名

管理员表：admin->
create table admin(
id int primary key,
name varchar(32) not null,
password varchar(128) not null
);

雇员表：emp
create table emp(
id int primary key auto_increment,
name varchar(64) not null,
grade tinyint,/* 表示1级工 */
email varchar(64) not null,
salary float
);

表创建到mysql数据库

添加表到
insert into emp(name,grade,email,salary) values('shunping',1,'shunping@sohu.com',200);

insert into admin values(100,'admin',md5('admin'));

5.代码阶段
准备素材（图片，静态页面，flash，文字）

要求：如果登录不成功，在login.php页面显示红色的提示
在管理页面提供一个超链接，可以退出系统

1要求大家完成不到数据库验证，就可以登录成功
2要求到数据库去验证，该用户是否存在

3在管理页面显示登陆成功人的名字

4在用户列表页面（）显示所有的用户信息
5考虑分页显示我们的用户信息

思路：
在分页中有几个变量是必须的
5.1$pageNow->显示第几页 用户输入
5.2$pageCount->共有几页
5.3$rowCount->共有多少条记录【这个从数据库获取】
5.4$pageSize->每页显示几条记录【程序员定义】

实例：说明
$pageNow=1;
$rowCount=7
$pageSize=3
讨论 $pageCount怎样计算
//小算法（函数：ceil 进一法取整）
$pageCount=ceil($rowCount=7/$pageSize=3);

mysql 分页小案例

测试一下分页的效率，在实际开发中，数据量很大，因此需要我们测试当数据量大时，是否可以满足用户需求
模拟大量的数据：20w
mysql 自我复制
insert into emp(name,grade,email,salary) select name,grade,email,salary from emp;

6.网站结构问题

从整个项目看，我们的页面中 loginProcess.php 和 empList.php 中有对数据库的操作，代码有重复，
在empList.php页面中有显示用户信息，还有分页逻辑，界面和业务逻辑混合，不好

目前模式：
1.model1模式 2.分层模式
3.mvc模式（php中有很多mvc框架，zend framework【最多】、thinkphp 、cakephp、 yii）

1.model1模式：把界面和业务放在一个页面完成
	缺点：表现层和业务逻辑层混在一起（乱！）
		开发过程，不利于多人协协同
		不利于后期维护
	优点：简单开发速度块
		适合开发小项目

2.分层模式：界面和业务分开编写-》好处就是结构清晰，利于分层开发

3.mvc模式：强制把数据的输入，数据的处理，数据的显示分开


使用分层模式来完成雇员信息分页的功能
思路：
1.在什么文件中去封装我们的分页代码--》empList.php 
2.通过分析我们知道了完成分页我们的empList。php文件需要两个重要的数据 一个是$pageCount 第二个是 分页需要显示的数据

-->请大家考虑，目前我们为了完成分页，是写在EmpService.php类，我们能不能做一个通用的方法，可以适用于各种情况的分页？

==》如何，做一个通用分页模块（函数）
思路：
我们设计一个FenYePage类，该类可以封装我们分页需要的各种信息

==>我们增加一个新的功能，删除某个雇员
1.我们使用传统的方法来完成，然后分析问题所在？
把删除用户的请求，提交给empList页面目前可以接受两种请求，因此我们需要分别对待，最简单的方法就是设置一个标志位flag
分析：我们如果真的这样吧删除请求，直接交给empList.php,这个页面好的结构会被破坏，所以这个页面又会变得臃肿--》MVC

介绍一个mvc的基本概念
1.mvc是一种软件设计模式-》套路
2.解释每个字母的含义，
m（model 模型【处理业务逻辑如xxService.class.php 工具类】）
v(view 视图/界面 使用php编写，比如 login。php ，empList。php 就是视图)
c(controller 控制器，控制器的主要作用是接受用户的请求，并调用某个service 的方法，完成任务，然后跳转到下一个页面)
3.mvc的核心思想--强制程序员在编写项目的时候，把数据的输入、输出分开

现在我们对mvc有了一个基本认识，通过代码编写和改写，删除用户的方法，加深对mvc的认识

==》使用mvc完成的 增加，修改、查询
使用mvc开发模式，完成雇员的增加，修改，删除，显示【查询】
画出我们的程序框架图（清晰思路，设计文件（视图、模型、控制器））

思考：是否每一个请求，都要对应一个控制器来响应？
原则：我们没有必要每一个请求，就对应一个控制器，可以这样：把同一逻辑的请求，都提交给一个控制器即可



现在我们先使用大家最容易想到的方式去完成，然后我们分析好不好
如果不好，又应当怎样做？-》开发模式


