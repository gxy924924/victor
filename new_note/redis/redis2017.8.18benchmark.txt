string(54) "0.61754800 1502964774->0.31427400 1502964787->0.303274"  12.696726 10w条   (windows 下 redis（存取速度相似）)（秒8000）

string(61) "0.17528800+1503381811->0.41913000+1503381808->2.7561581134796
1w条 （windows 下 mysql （单条取））

 string(61) "0.39543400+1503382163->0.57427200+1503382160->2.8211619853973"
 1w条 （mysql 单条存）

string(63) "0.65652400+1503381972->0.61252200+1503381972->0.044002056121826"
(mysql 直接遍历（11016条）的速度)

0.58506500+1503719324->0.52000400+1503719323->1.0650610923767
memcache 存10000条

0.64973500+1503719493->0.49866900+1503719492->1.1510660648346
memcache 取10000条

结果：windows mysql 存取的速度约为3000-4000条/秒
      redis 在windows表现较差8000/秒
      redis 在linux表现尚可20000+/秒
      以上结果均为经过php处理数据的结果

结论：1.使用redis必须在linux上才有价值
      2.只有单一数据需要重复取（如用户、用户权限、公用数据等）才有使用redis的价值
      3.如果一次取的数据条数较多（超过5倍）则不要使用redis
      4.mysql遍历的速度还是很快的

test@ubuntu:/usr/local/redis$ ./bin/redis-benchmark -h localhost -p 6379 -c 100 -n 100000
====== PING_INLINE ======
  100000 requests completed in 2.25 seconds
  100 parallel clients
  3 bytes payload
  keep alive: 1

24.90% <= 1 milliseconds
90.64% <= 2 milliseconds
99.83% <= 3 milliseconds
99.97% <= 4 milliseconds
99.99% <= 5 milliseconds
100.00% <= 5 milliseconds
44385.27 requests per second

====== PING_BULK ======
  100000 requests completed in 2.31 seconds
  100 parallel clients
  3 bytes payload
  keep alive: 1

28.47% <= 1 milliseconds
89.90% <= 2 milliseconds
99.66% <= 3 milliseconds
99.97% <= 4 milliseconds
100.00% <= 5 milliseconds
100.00% <= 5 milliseconds
43271.31 requests per second

====== SET ======
  100000 requests completed in 2.47 seconds
  100 parallel clients
  3 bytes payload
  keep alive: 1

22.35% <= 1 milliseconds
85.27% <= 2 milliseconds
99.54% <= 3 milliseconds
99.95% <= 4 milliseconds
100.00% <= 4 milliseconds
40420.37 requests per second

====== GET ======
  100000 requests completed in 2.29 seconds
  100 parallel clients
  3 bytes payload
  keep alive: 1

25.05% <= 1 milliseconds
90.18% <= 2 milliseconds
99.34% <= 3 milliseconds
99.84% <= 4 milliseconds
99.91% <= 6 milliseconds
99.94% <= 7 milliseconds
99.99% <= 8 milliseconds
100.00% <= 8 milliseconds
43706.29 requests per second

====== INCR ======
  100000 requests completed in 2.57 seconds
  100 parallel clients
  3 bytes payload
  keep alive: 1

21.78% <= 1 milliseconds
82.21% <= 2 milliseconds
99.29% <= 3 milliseconds
99.87% <= 4 milliseconds
99.98% <= 5 milliseconds
100.00% <= 5 milliseconds
38925.65 requests per second

====== LPUSH ======
  100000 requests completed in 2.56 seconds
  100 parallel clients
  3 bytes payload
  keep alive: 1

21.87% <= 1 milliseconds
83.25% <= 2 milliseconds
99.54% <= 3 milliseconds
99.94% <= 4 milliseconds
100.00% <= 4 milliseconds
39123.63 requests per second

====== RPUSH ======
  100000 requests completed in 2.58 seconds
  100 parallel clients
  3 bytes payload
  keep alive: 1

21.06% <= 1 milliseconds
82.23% <= 2 milliseconds
99.20% <= 3 milliseconds
99.87% <= 4 milliseconds
99.99% <= 5 milliseconds
100.00% <= 5 milliseconds
38744.67 requests per second

====== LPOP ======
  100000 requests completed in 2.87 seconds
  100 parallel clients
  3 bytes payload
  keep alive: 1

19.45% <= 1 milliseconds
73.96% <= 2 milliseconds
96.10% <= 3 milliseconds
98.96% <= 4 milliseconds
99.45% <= 5 milliseconds
99.65% <= 6 milliseconds
99.79% <= 7 milliseconds
99.85% <= 8 milliseconds
99.92% <= 9 milliseconds
99.96% <= 10 milliseconds
99.99% <= 11 milliseconds
100.00% <= 11 milliseconds
34891.84 requests per second

====== RPOP ======
  100000 requests completed in 2.69 seconds
  100 parallel clients
  3 bytes payload
  keep alive: 1

20.96% <= 1 milliseconds
79.48% <= 2 milliseconds
98.24% <= 3 milliseconds
99.80% <= 4 milliseconds
99.99% <= 5 milliseconds
100.00% <= 5 milliseconds
37216.23 requests per second

====== SADD ======
  100000 requests completed in 2.77 seconds
  100 parallel clients
  3 bytes payload
  keep alive: 1

18.71% <= 1 milliseconds
75.63% <= 2 milliseconds
97.21% <= 3 milliseconds
99.70% <= 4 milliseconds
99.96% <= 5 milliseconds
100.00% <= 5 milliseconds
36140.22 requests per second

====== SPOP ======
  100000 requests completed in 2.61 seconds
  100 parallel clients
  3 bytes payload
  keep alive: 1

21.56% <= 1 milliseconds
80.78% <= 2 milliseconds
98.95% <= 3 milliseconds
99.87% <= 4 milliseconds
100.00% <= 5 milliseconds
100.00% <= 5 milliseconds
38284.84 requests per second

====== LPUSH (needed to benchmark LRANGE) ======
  100000 requests completed in 2.59 seconds
  100 parallel clients
  3 bytes payload
  keep alive: 1

20.90% <= 1 milliseconds
81.53% <= 2 milliseconds
99.36% <= 3 milliseconds
99.91% <= 4 milliseconds
99.98% <= 5 milliseconds
99.99% <= 6 milliseconds
100.00% <= 6 milliseconds
38610.04 requests per second

====== LRANGE_100 (first 100 elements) ======
  100000 requests completed in 2.24 seconds
  100 parallel clients
  3 bytes payload
  keep alive: 1

23.64% <= 1 milliseconds
90.87% <= 2 milliseconds
99.77% <= 3 milliseconds
100.00% <= 3 milliseconds
44702.73 requests per second

====== LRANGE_300 (first 300 elements) ======
  100000 requests completed in 2.21 seconds
  100 parallel clients
  3 bytes payload
  keep alive: 1

23.57% <= 1 milliseconds
91.60% <= 2 milliseconds
99.60% <= 3 milliseconds
99.93% <= 4 milliseconds
99.97% <= 5 milliseconds
100.00% <= 5 milliseconds
45228.40 requests per second

====== LRANGE_500 (first 450 elements) ======
  100000 requests completed in 2.27 seconds
  100 parallel clients
  3 bytes payload
  keep alive: 1

22.74% <= 1 milliseconds
90.22% <= 2 milliseconds
99.74% <= 3 milliseconds
100.00% <= 4 milliseconds
100.00% <= 4 milliseconds
44052.86 requests per second

====== LRANGE_600 (first 600 elements) ======
  100000 requests completed in 2.29 seconds
  100 parallel clients
  3 bytes payload
  keep alive: 1

23.13% <= 1 milliseconds
89.61% <= 2 milliseconds
99.63% <= 3 milliseconds
99.93% <= 4 milliseconds
100.00% <= 5 milliseconds
43572.98 requests per second

====== MSET (10 keys) ======
  100000 requests completed in 2.46 seconds
  100 parallel clients
  3 bytes payload
  keep alive: 1

5.27% <= 1 milliseconds
75.23% <= 2 milliseconds
99.03% <= 3 milliseconds
99.86% <= 4 milliseconds
99.92% <= 5 milliseconds
99.97% <= 6 milliseconds
100.00% <= 6 milliseconds
40733.20 requests per second
